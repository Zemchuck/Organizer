# backend/init_db.py
import os
from sqlalchemy import inspect
from app.db import engine, Base
import app.models  # rejestruje wszystkie modele

def _maybe_remove_sqlite_file():
    # DziaÅ‚a tylko dla SQLite plikowej (nie :memory: i nie zdalne DB)
    url = engine.url
    if url.get_backend_name() == "sqlite":
        db_path = url.database  # Å›cieÅ¼ka pliku .db
        # Upewnij siÄ™, Å¼e nie jest to :memory:
        if db_path and db_path != ":memory:" and os.path.exists(db_path):
            print(f"Usuwam plik bazy: {db_path}")
            engine.dispose()  # zwolnij uchwyty zanim skasujesz plik
            os.remove(db_path)

def main():
    print("ğŸ”§ OdÅ›wieÅ¼am bazÄ™â€¦")

    # 1) JeÅ›li SQLite-plik â€” po prostu usuÅ„ plik (najszybsze i najczystsze)
    _maybe_remove_sqlite_file()

    # 2) Dla pewnoÅ›ci: jeÅ›li to nie SQLite-plik, zrÃ³b drop_all (np. przy Postgresie)
    try:
        print("KasujÄ™ tabele (gdyby istniaÅ‚y)â€¦")
        Base.metadata.drop_all(bind=engine)
    except Exception as e:
        # przy SQLite po usuniÄ™ciu pliku drop_all nie jest potrzebny
        print(f"(info) drop_all: {e}")

    # 3) Tworzymy od zera â€” wraz z indeksami i constraintami
    print("TworzÄ™ tabele i indeksyâ€¦")
    Base.metadata.create_all(bind=engine)

    # 4) KrÃ³tki raport kontrolny
    insp = inspect(engine)
    tables = insp.get_table_names()
    print(f"âœ… Gotowe. Tabele: {', '.join(tables) if tables else '(brak)'}")

if __name__ == "__main__":
    main()
